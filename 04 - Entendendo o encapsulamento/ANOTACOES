Ententendo encapsulamento:

Encapsulamento:  esconder como a classse esta implementando os mototos.
**Encapsular é esconder os detalhes da implementação dentro da classe. Dessa forma, as classes que farão uso dela, não saberão como ela funciona internamente. A vantagem disso é que conseguimos depois facilmente alterar a implementação, sem que ela impacte nas classes dependentes.


Como fazer para descobrir se um código está encapsulado ou não?

Uma alternativa para isso é criar um trecho de código (seja uma nova classe, ou mesmo um teste automatizado) e fazer uso da classe. Nesse código, você deverá o tempo todo se fazer a pergunta: "Consigo saber COMO a classe está implementando essa regra de negócio?". Se a resposta for sim, então aquele comportamento não está bem encapsulado.




Encapsulando a regra de neogcio onde ela deve estar.


intimidade inapropriada: quando uma claase entendo demais como a outro funciona.

"mande, não pergunte."

**propagação de mudanças.


Lei de Demeter: diminuir o maximo o encadeamento de invocações.
- aumento de encapsulamento
O que é a tal da Lei de Demeter? O que o desenvolvedor ganha quando a segue?
A Lei de Demeter, de maneira simples, diz para que você evite ao máximo fazer expressões como a.getB().getC().getD().acao(). O problema dessa cadeia, é que a classe que contém essa expressão, conhece muito sobre o comportamento da classe A, depois da classe B, até D. Se alguma delas mudar, a mudança será propagada para muitos lugares.

Diminuir a quantidade de invocações como essas ajuda você a encapsular melhor o comportamento e o funcionamento interno das classes.



*Lista nao modificada. Collections.unmodi



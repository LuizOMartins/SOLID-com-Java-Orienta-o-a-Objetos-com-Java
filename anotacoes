SOLID é um acrônimo dos cinco primeiros princípios da programação orientada a objetos e design de código identificados por Robert C. Martin (ou Uncle Bob) por volta do ano 2000. 


Letra   Sigla   Nome    Definição
S    SRP    Principio da Responsabilidade Única Uma classe deve ter um, e somente um, motivo para mudar.

O    OCP    Princípio Aberto-Fechado    Você deve ser capaz de estender um comportamento de uma classe, sem modificá-lo.

L    LSP    Princípio da Substituição de Liskov As classes base devem ser substituíveis por suas classes derivadas.

I    ISP    Princípio da Segregação da Interface    Muitas interfaces específicas são melhores do que uma interface única.

D    DIP    Princípio da inversão da dependência    Dependa de uma abstração e não de uma implementação.




https://www.eduardopires.net.br/2013/04/orientacao-a-objeto-solid/#:~:text=SOLID%20%C3%A9%20um%20acr%C3%B4nimo%20dos,poderiam%20se%20encaixar%20nesta%20palavra.


_______________________________________________


Identificar codigo coeso: 


Quando essa classe vai parar de crescer ?

**Se a classe é coesa, ou seja, ela tem uma única responsabilidade, ela cuida de apenas uma única parte do meu sistema, ela representa uma única entidade. 

**  Todo mundo sabe a consequência de um código complicado, certo? É mais difícil de manter, é muito mais suscetível a um bug, porque o código é enorme, você vai deixar passar alguma coisa ali, o reuso é muito menor, porque se a classe faz muita coisa é difícil levá-la pra um outro sistema. Porque o outro sistema raramente vai precisar de tudo o que ela faz. E assim por diante.



